---
title: "Covariate-Adjusted Functional Data Analysis for Structural Health Monitoring"
subtitle: "KW51: Mode 06 plotting results"

# Freeze computed outputs
freeze: true

# Enable banner style title blocks
title-block-banner: true

# Enable CC licence appendix
license: "CC BY"

# Default for table of contents
toc: true
toc-title: Table of contents
toc-location: left

# Default knitr options
execute:
  echo: true
  message: true
  warning: true
cache: false

date: "02/13/2025" 

format:
  html:
    embed-resources: false
    code-fold: false
    code-summary: "Code"
    code-tools:
      source: true
      toggle: true
      caption: none

knitr:
  opts_chunk:
    dev:
      - png
      - pdf
      
editor: source

author:
  - name: Philipp Wittenberg
    corresponding: true
    id: pw
    orcid: 0000-0001-7151-8243
    email: pwitten@hsu-hh.de
    affiliation: 
      - name: Helmut Schmidt University
        city: Hamburg
        country: Germany
        url: www.hsu-hh.de
  - name: Lizzie Neumann
    id: ln
    orcid: 0000-0003-2256-1127
    email: neumannl@hsu-hh.de
    affiliation: 
      - name: Helmut Schmidt University
        city: Hamburg
        country: Germany
        url: www.hsu-hh.de
  - name: Alexander Mendler
    id: ln
    orcid: 0000-0002-7492-6194
    email: alexander.mendler@tum.de
    affiliation: 
      - name: Technical University of Munich
        city: Hamburg
        country: Germany
        url: www.hsu-hh.de
  - name: Jan Gertheiss
    id: jg
    orcid: 0000-0001-6777-4746
    email: gertheij@hsu-hh.de
    affiliation: 
      - name: Helmut Schmidt University
        city: Hamburg
        country: Germany
        url: www.hsu-hh.de        
        
        

citation: 
  container-title: arXiv:2408.02106
  doi: 10.48550/arXiv.2408.02106
  
bibliography:
  - literature.bib
link-citations: true

output: github_document
---

```{r}
start_time <- Sys.time()
```

Load libraries

```{r load_libraries, results='hide', message=FALSE, warning=FALSE}
# Package names
packages <- c("benchmarkme", "dplyr", "forcats", "ggplot2", "gratia", "lme4",
              "mgcv", "patchwork", "plotly", "refund", "spc", 
              "tidyr", "utils", "reticulate") #"reticulate" works only if python is installed
                                # to save standalone pdf figures of 3-D plots 

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))


theme_set(theme_bw() +
            theme(panel.grid.major=element_blank(), 
                  panel.grid.minor=element_blank(),              
                  strip.background=element_rect(fill="white"),
                  strip.text=element_text(size=10, face="bold"),
                  legend.title=element_blank(),
                  plot.title=element_text(hjust=.5),
                  axis.text.x = element_text(color="black"),
                  axis.text.y = element_text(color="black"),
                  axis.ticks = element_line(color = "black")
            )
          )
knitr::opts_chunk$set(eval=TRUE) 
nc <- 8
reticulate::py_run_string("import sys")
mcb <- c("#D55E00", "#56B4E9", "#E69F00", "#009E73", "#CC79A7")
```

## Model 1 (KW51_basic_model) 

```{r compute_gam2d_plots}
gam2d <- readRDS(file="data/mode06_gam2d.RDS")
p7 <- draw(gam2d, select="s(td01)", rug=FALSE) + 
  scale_x_continuous(name="Time of day [h]", breaks=seq(0, 24, 6)) +
  labs(y=bquote(italic(tilde(alpha)(t))), title="Recurring daily pattern") +
  scale_y_continuous(limits=c(-.02, .05)) +
    theme(legend.title=element_blank(), legend.position="none",
          axis.text=element_text(size=14),
          axis.title=element_text(size=14), 
          legend.text=element_text(size=14),
          plot.title = element_text(size=14),
          strip.text.x = element_text(size=16))

p8 <- draw(gam2d, select="s(temp)", rug=FALSE) + 
  labs(x=bquote(Temperature~italic(z(t))~"[°"*C*"]"), y=bquote(italic(f(z(t)))), 
       title="Temperature effect") +
  scale_y_continuous(limits=c(-.02, .05)) +
      theme(legend.title=element_blank(), legend.position="none",
          axis.text=element_text(size=14),
          axis.title=element_text(size=14), 
          legend.text=element_text(size=14),
          plot.title = element_text(size=14),
          strip.text.x = element_text(size=16))

p7$labels$caption <- rep("", length(p7$labels$caption))
p8$labels$caption <- rep("", length(p8$labels$caption))
p1 <- wrap_plots(p7, p8)
```

```{r Figure_7_plot_gam2d, fig.width=8, fig.height=4}
p1
```

```{r gam2d_compute_eigenfrequency_plots, results='hide'}
dtaiB2 <- readRDS(file="data/mode06_dtaiB2.RDS")
df <- dtaiB2 |>
  select(ind_hour, starts_with("ef")) |>
  pivot_longer(cols=starts_with("ef"), names_to="efcts") |>
    mutate(efcts=fct_recode(as.factor(efcts), "1" = "ef01", "2" = "ef02", 
                            "3" = "ef03", "4" = "ef04"))

p11 <- df |>
  ggplot(aes(x=ind_hour, y=value, group=efcts, colour=efcts)) +
    geom_line(linewidth=1) +
    scale_y_continuous(limits=c(-.4,.4), name="") +
    scale_x_continuous(name="Time [h]", breaks=seq(0, 24, 6)) +
    scale_colour_manual(values=mcb[2:5]) +
    facet_wrap(~efcts, scales="free_x", nrow=1,
               labeller=label_bquote(cols=Eigenfunction~phi[.(substr(efcts, 1, 3))](t))) +
    theme(legend.position="none", 
          axis.text=element_text(size=14),
          axis.title=element_text(size=14))
```

```{r Figure_6_plot_eigenfreq_gam2d, fig.width=12, fig.height=3.5}
p11
```

```{r gam2d_variance_first_two_components}
df <- VarCorr(gam2d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
    t() |>
  as.data.frame() |>
  as.numeric()

100*sum(df[1:2]/sum(df))
```

```{r gam2d_variance_last_component}
df <- VarCorr(gam2d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
    t() |>
  as.data.frame() |>
  as.numeric()
100*sum(df[4]/sum(df))
```
## Model 2 (KW51 extended_model_additive_effects)

```{r compute_gam6_plot_part1, dev='svg'}
dtaiB6 <- readRDS(file="data/mode06_dtaiB6.RDS")
gam6d <- readRDS("data/mode06_gam6d.RDS")

ds1 <- data_slice(gam6d$gam, td01=evenly(td01, n=100),
                 ind_day=evenly(ind_day, n=100))

mode <- mgcv::predict.gam(gam6d$gam, newdata=ds1, type="terms")
res1 <- select(ds1, td01, ind_day) |>  mutate(mode=mode[,"te(td01,ind_day)"])

surface1 <- unclass(xtabs(mode ~ td01 + ind_day, data=res1))
fig0 <- plot_ly(z=~surface1, y=~as.numeric(rownames(surface1)), 
                x=~as.numeric(colnames(surface1)), cmax=.26, cmin=-.055,
                type="surface", 
                contours = list(
                  z=list(show=FALSE, start=-.007, end=.007, size=.00, color = 'black'),
                  y=list(show=TRUE, start=0, end=24, size=3, width=5, color='grey'),
                  x=list(show=TRUE, start=0, end=200, size=25, width=5, color="grey"))
                ) |>
  colorbar(title="", x=.9, y=0.7) %>%
  hide_colorbar() |>
  layout(
    font=list(color = 'black'),
    scene=list(
      xaxis=list(title='Day', color="black"),
      yaxis=list(title="Time of day [h]", color="black", tickvals=seq(6, 24, 6), autorange="reversed"),
      zaxis=list(title="Intercept", color="black", range=c(-.02, .05), nticks=5),
    camera=list(
      margin=list(l=0, r=0, b=0, t=0),
      eye=list(x=-1.8, y=-1.75, z=.8),
      center=list(x=0, y=0, z=0)
  ))) |>
  config(displayModeBar=FALSE)

fig0
save_image(fig0, "Figure_8a_plot_2d_3D_fig1_mode06.pdf")
```

```{r compute_gam6_plot_part2}
gam6d <- readRDS("data/mode06_gam6d.RDS")
p2 <- draw(gam6d, select="s(temp)", rug=FALSE) + 
  labs(x=bquote(Temperature~italic(z[1](t))~"[°"*C*"]"), 
       y=bquote(italic(f[1](z[1](t)))), 
       title="Temperature effect") +
  scale_y_continuous(limits=c(-.02, .05)) +
        theme(legend.title=element_blank(), legend.position="none",
          axis.text=element_text(size=12),
          axis.title=element_text(size=12), 
          legend.text=element_text(size=14),
          plot.title = element_text(size=14),
          strip.text.x = element_text(size=14))
p3 <- draw(gam6d, select="s(humid)", rug=FALSE) + 
    labs(x=bquote(Relative~humidity~z[2](t)~"[%]"), 
         y=bquote(italic(f[2](z[2](t)))),        
         title="Relative humidity effect") +
         scale_y_continuous(limits=c(-.02, .05)) +
        theme(legend.title=element_blank(), legend.position="none",
          axis.text=element_text(size=12),
          axis.title=element_text(size=12), 
          legend.text=element_text(size=14),
          plot.title = element_text(size=14),
          strip.text.x = element_text(size=14))
p1$labels$caption <- rep("", length(p1$labels$caption))
p2$labels$caption <- rep("", length(p2$labels$caption))
p3$labels$caption <- rep("", length(p3$labels$caption))
```

```{r Figure_8b_plot_gam6-1, fig.width=8, fig.height=4}
p2 + p3 + plot_layout(ncol=2)
```

## Model 4 (KW51 extended_model_interactions)

```{r Figure_9a_compute_7d_3D_fig2, dev='svg'}
gam7d <- readRDS("data/mode06_gam7d.RDS")
dtaiB7 <- readRDS("data/mode06_dtaiB7.RDS")

ds2 <- data_slice(gam7d$gam, td01=evenly(td01, n=100),
                 ind_day=evenly(ind_day, n=100))

mode <- mgcv::predict.gam(gam7d$gam, newdata=ds2, type="terms")
res2 <- select(ds2, td01, ind_day) |>  mutate(mode=mode[,"te(td01,ind_day)"])

surface2 <- unclass(xtabs(mode ~ td01 + ind_day, data=res2))

fig2 <- plot_ly(z=~surface2, 
                y=~as.numeric(rownames(surface2)), 
                x=~as.numeric(colnames(surface2)), type="surface", 
                cmax=.26, cmin=-.055,
                contours = list(
                  z=list(show=TRUE),
                  y=list(show=TRUE, start=0, end=24, size=6, width=5, color="grey"),
                  x=list(show=TRUE, start=100, end=200, size=20, width=5, color="grey")
       )) %>%
  colorbar(title="", x=.9, y=0.7) %>%
  hide_colorbar() |>
  layout(
    font=list(color = 'black'),
    scene = list(
      xaxis=list(title='Day', color="black"),
      yaxis=list(title="Time of day [h]", color="black", tickvals=seq(6, 24, 6), autorange="reversed"),
      zaxis=list(title='Intercept', color="black", range=c(-.02, .05), nticks=5),
    camera=list(
      margin=list(l=0, r=0, b=0, t=0),
      eye=list(x=-1.7, y=-1.5, z=.5),
      center=list(x=0, y=0, z=0)
  ))) |>
  config(displayModeBar=FALSE)
fig2

save_image(fig2, "Figure_9a_compute_7d_3D_fig2.pdf")
```

```{r Figure_9b_compute_7d_3D_fig1, dev='svg'}
ds1 <- data_slice(gam7d$gam, temp=evenly(temp, n=100),
                 humid=evenly(humid, n=100))

mode <- mgcv::predict.gam(gam7d$gam, newdata=ds1, type="terms")
res1 <- select(ds1, temp, humid) |>  mutate(mode=mode[,"te(temp,humid)"])
surface1 <- unclass(xtabs(mode ~ temp + humid, data=res1))

fig1 <- plot_ly(z=~surface1, y=~as.numeric(rownames(surface1)), 
                x=~as.numeric(colnames(surface1)), type="surface", cmax=-.26, cmin=.055,
               contours = list( 
                 z=list(show=FALSE, usecolormap=TRUE, highlightcolor="#ff0000", project=list(z=FALSE)),
                 y=list(show=TRUE, start=-5, end=25, size=5, color="grey"),
                 x=list(show=TRUE, start=0, end=100, size=10, color="grey"))) |>
  colorbar(title="", x=.85, y=0.7) |>
  hide_colorbar() |>
  layout(
    font=list(color = 'black'),
    margin=list(l=0, r=0, b=0, t=0),
    legend=list(orientation="h", x=-0.25, y=-0.10),
    scene=list(
      camera=list(eye=list(x=2.2, y=.8, z=.5)),
      name="scene1",
      xaxis=list(title="Relative humidity [%]", autorange="reversed", range=c(0, 100), nticks=10),
      yaxis=list(title="Temperature [°C]"),
      zaxis=list(title='f(temperature, relative humidity)', range=c(-.02, .05), nticks=5))
  ) |>
  config(displayModeBar=FALSE) 

fig1
save_image(fig1, "Figure_9b_compute_7d_3D_fig1.pdf")
```

```{r}
summary(ds1)
```


## Monitoring

### MEWMA setup monitoring including retrofitting period

```{r load_data_for_monitoring}
dta   <- readRDS("data/Dataset_bridge_KW51.RDS")
nc    <- 8
var   <- c("temp", "mode", "ind_day", "ind_hour", "td01", "humid")
M     <- (sprintf("Mode_%02d", 1:14))
i     <- 06  # Mode number
N     <- 200 # End of Phase I
sigma <- 3   # Sigma limit
hseq <- seq(.5, 23.5, 1)
```

```{r}
## Phase I data (first 200 observations)
dtai <- dta |> 
  select(tBD31A, rhBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, humid=rhBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day<=N) |>
  mutate(td01 = hseq) |>
  ungroup()

## determine limits based on mean+-sigma*sd
LIMITS <- dtai |>
  filter(ind_day<=N) |>
  select(mode) |> 
  summarise(mmean = mean(mode, na.rm=TRUE),
            msd   = sd(mode, na.rm=TRUE),
            upperLimit=mmean+sigma*msd,
            lowerLimit=mmean-sigma*msd) 

## days higher than sigma limit
filter(dtai, mode>LIMITS$upperLimit) |> 
  select(ind_day) |> 
  unique()

## replace NA for days higher than sigma limit
dtai <- dtai |> 
  mutate(mode=replace(mode, mode>LIMITS$upperLimit & ind_day%in%c(1:N), NA)) |>
  mutate(mode=replace(mode, mode<LIMITS$lowerLimit & ind_day%in%c(1:N), NA))

## data for Phase II
dtai2 <- dta |> 
  select(tBD31A, rhBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, humid=rhBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day>N) |>
  mutate(td01 = hseq) |>
  ungroup()

x <- 201:472
y <- 226:360
z <- x[! x %in% y]

## data for 
dtai3 <- dta |>
  select(tBD31A, rhBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, humid=rhBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day%in%z) |>
   mutate(td01 = hseq) |>
  ungroup()
```

```{r General_setup}
DFa  <- rbind(dtai, dtai2)  # data without retrofitting
DFb  <- rbind(dtai, dtai3)  # data with retrofitting
yaoetal <- function(data, phi, s2, sig, nu) {
  idx    <- is.na(data)
  newphi <- phi[(idx == FALSE), ]
  SIGMA  <- newphi %*% s2 %*% t(newphi) + sig * diag(nrow(newphi))
  nu * c(t(newphi) %*% chol2inv(chol(SIGMA)) %*% data[(idx == FALSE)])
}
```

## Calculate MEWMA and T2 statistics

### MEWMA plot interactions lambda = 0.3 with interactions model

### MEWMA setup monitoring including retrofitting period with interactions model

```{r MEWMA_setup_interactions_lambda_03}
r    <- 0.3   # smoothing parameter of the control chart
L0   <- 370.4 # In-control ARL
fpcaRes <- readRDS("data/mode06_gam7_fpcaRes.RDS")
gam7d  <- readRDS("data/mode06_gam7d.RDS")
p      <- fpcaRes$npc
h4     <- spc::mewma.crit(r, L0, p, hs=0, r=20)
nu     <- lme4::VarCorr(gam7d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
  t() |>
  as.data.frame() |>
  as.numeric()
s2     <- diag(nu)
invSig <- diag(1/nu) / (r/(2-r))
sig    <- gam7d$gam$sig2
phi    <- fpcaRes$efunctions
h403   <- h4
```

```{r MEWMA_chart_with_retrofitting_interactions_lambda_03}
## omit days with 24 NA's per day
NAgeq24 <- DFa |>
  select(mode, temp, humid, ind_day, ind_hour) |>
  group_by(ind_day) |>
  summarise(across(-c(ind_hour), ~sum(is.na(.))>=23)) |>
  filter(mode==TRUE | temp==TRUE | humid==TRUE) 

DF <- DFa |> filter(!ind_day %in% NAgeq24$ind_day) 

x   <- unique(DF$ind_day)[-1]

## Initialize Hotelling setup
Z   <- rep(0, p)
T2a <- rep(NA, length(x))
mu0 <- rep(0, p)

## Fill Hotelling chart
for(i in x) {
  df    <- filter(DF, ind_day==i)
  pred  <- predict(gam7d$gam, newdata=select(df, mode, td01, temp, humid, ind_day))
  error <- matrix(pred-df$mode, ncol=24)
  error <- matrix(error, ncol=24)
  X <- yaoetal(error, phi, s2, sig, nu)
  if ( i==min(x) ) {
    Z <- r*X + (1-r)*mu0
  } else {
    Z <- r*X + (1-r)*Z
  }
  T2a[i] <- t(Z-mu0) %*% invSig %*% (Z-mu0)
}

## create data frame for plotting
resl03_interactions <- data.frame(day=1:472, T2=T2a) |>
  mutate(date=seq.POSIXt(first(DFa$date), last(DFa$date), by="day"))
```

```{r}
filter(resl03_interactions, T2 > h403) |> head(n=10)
```

### MEWMA plot interactions lambda = 1 with interactions model

### MEWMA setup monitoring including retrofitting period with interactions model

```{r MEWMA_setup_interactions_lambda_1}
fpcaRes <- readRDS("data/mode06_gam7_fpcaRes.RDS")
gam7d  <- readRDS("data/mode06_gam7d.RDS")
p      <- fpcaRes$npc
r      <- 1
h4     <- spc::mewma.crit(r, L0, p, hs=0, r=20)
nu     <- lme4:: VarCorr(gam7d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
  t() |>
  as.data.frame() |>
  as.numeric()
s2     <- diag(nu)
invSig <- diag(1/nu) / (r/(2-r))
sig    <- gam7d$gam$sig2
phi    <- fpcaRes$efunctions
h41    <- h4
```

```{r MEWMA_chart_with_retrofitting_interactions_lambda_1}
## omit days with 24 NA's per day
NAgeq24 <- DFa |>
  select(mode, temp, humid, ind_day, ind_hour) |>
  group_by(ind_day) |>
  summarise(across(-c(ind_hour), ~sum(is.na(.))>=23)) |>
  filter(mode==TRUE | temp==TRUE | humid==TRUE) 

DF <- DFa |> filter(!ind_day %in% NAgeq24$ind_day) 

x   <- unique(DF$ind_day)[-1]

## Initialize Hotelling setup
Z   <- rep(0, p)
T2a <- rep(NA, length(x))
mu0 <- rep(0, p)

## Fill Hotelling chart
for(i in x) {
  df    <- filter(DF, ind_day==i)
  pred  <- predict(gam7d$gam, newdata=select(df, mode, td01, temp, humid, ind_day))
  error <- matrix(pred-df$mode, ncol=24)
  error <- matrix(error, ncol=24)
  X <- yaoetal(error, phi, s2, sig, nu)
  if ( i==min(x) ) {
    Z <- r*X + (1-r)*mu0
  } else {
    Z <- r*X + (1-r)*Z
  }
  T2a[i] <- t(Z-mu0) %*% invSig %*% (Z-mu0)
}

## create data frame for plotting
resl1_interactions <- data.frame(day=1:472, T2=T2a) |>
  mutate(date=seq.POSIXt(first(DFa$date), last(DFa$date), by="day"))
```

```{r}
filter(resl1_interactions, T2 > h41) |> head(n=10)
```

### MEWMA plot basic model lambda = 0.3

### MEWMA setup monitoring including retrofitting period with basic model

```{r load_data_for_monitoring_basic_model}
dta   <- readRDS("data/Dataset_bridge_KW51.RDS")
nc    <- 8
var   <- c("temp", "mode", "ind_day", "ind_hour", "td01")
M     <- (sprintf("Mode_%02d", 1:14))
i     <- 06  # Mode number
N     <- 200 # End of Phase I
sigma <- 3   # Sigma limit
hseq <- seq(.5, 23.5, 1)
```

```{r basic_model_data}
## Phase I data (first 200 observations)
dtai <- dta |> 
  dplyr::select(tBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day<=N) |>
  mutate(td01 = hseq) |>
  ungroup()

## determine limits based on mean+-sigma*sd
LIMITS <- dtai |>
  filter(ind_day<=N) |>
  dplyr::select(mode) |> 
  summarise(mmean = mean(mode, na.rm=TRUE),
            msd   = sd(mode, na.rm=TRUE),
            upperLimit=mmean+sigma*msd,
            lowerLimit=mmean-sigma*msd) 

## days higher than sigma limit
filter(dtai, mode>LIMITS$upperLimit) |> 
  dplyr::select(ind_day) |> 
  unique()

## replace NA for days higher than sigma limit
dtai <- dtai |> 
  mutate(mode=replace(mode, mode>LIMITS$upperLimit & ind_day%in%c(1:N), NA)) |>
  mutate(mode=replace(mode, mode<LIMITS$lowerLimit & ind_day%in%c(1:N), NA))

## data for Phase II
dtai2 <- dta |> 
  dplyr::select(tBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day>N) |>
  mutate(td01 = hseq) |>
  ungroup()

x <- 201:472
y <- 226:360
z <- x[! x %in% y]

## data for 
dtai3 <- dta |>
  dplyr::select(tBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day%in%z) |>
   mutate(td01 = hseq) |>
  ungroup()
```

```{r MEWMA_setup_basic_lambda_03}
fpcaRes <- readRDS("data/mode06_gam2_fpcaRes.RDS")
gam2d  <- readRDS("data/mode06_gam2d.RDS")
p      <- fpcaRes$npc
r      <- 0.3   # smoothing parameter of the control chart
L0     <- 370.4 # In-control ARL
h4     <- spc::mewma.crit(r, L0, p, hs=0, r=20)
nu     <- lme4::VarCorr(gam2d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
  t() |>
  as.data.frame() |>
  as.numeric()
s2     <- diag(nu)
invSig <- solve(s2) / (r/(2-r))
sig    <- gam2d$gam$sig2
phi    <- fpcaRes$efunctions
h403   <- h4
```

```{r MEWMA_chart_with_retrofitting_basic_lambda_03}
## omit days with 24 NA's per day
NAgeq24 <- DFa |>
  dplyr::select(mode, temp, ind_day, ind_hour) |>
  group_by(ind_day) |>
  summarise(across(-c(ind_hour), ~sum(is.na(.))>=23)) |>
  filter(mode==TRUE | temp==TRUE) 

DF <- DFa |> filter(!ind_day %in% NAgeq24$ind_day) 

x   <- unique(DF$ind_day)

## Initialize Hotelling setup
Z   <- rep(0, p)
T2a <- rep(NA, 472)
mu0 <- rep(0, p)
XX <- matrix(NA, nrow=472, ncol=p)
## Fill Hotelling chart
for(i in x) {
  df    <- filter(DF, ind_day==i)
  pred  <- predict(gam2d$gam, newdata=dplyr::select(df, mode, td01, temp))
  error <- matrix(pred-df$mode, ncol=24)
  error <- matrix(error, ncol=24)
  X <- yaoetal(error, phi, s2, sig, nu)
  XX[i,] <- X
  if ( i==min(x) ) {
    Z <- r*X + (1-r)*mu0
  } else {
    Z <- r*X + (1-r)*Z
  }
  T2a[i] <- t(Z-mu0) %*% invSig %*% (Z-mu0)
}

## create data frame for plotting
resl03_basic <- data.frame(day=1:472, T2=T2a) |>
  mutate(date=seq.POSIXt(first(DFa$date), last(DFa$date), by="day"))
```

```{r}
filter(resl03_basic, T2 > h403) |> head(n=10)
```

### MEWMA plot interactions lambda = 1

### MEWMA setup monitoring including retrofitting period with basic model

```{r MEWMA_setup_basic_lambda_1}
fpcaRes <- readRDS("data/mode06_gam2_fpcaRes.RDS")
gam2d  <- readRDS("data/mode06_gam2d.RDS")
p      <- fpcaRes$npc
r      <- 1
h4     <- spc::mewma.crit(r, L0, p, hs=0, r=20)
nu     <- lme4::VarCorr(gam2d$lme)[c("ef01", "ef02", "ef03", "ef04"),][,"Variance"] |>
  t() |>
  as.data.frame() |>
  as.numeric()
s2     <- diag(nu)
invSig <- solve(s2) / (r/(2-r))
sig    <- gam2d$gam$sig2
phi    <- fpcaRes$efunctions
h41    <- h4
```

```{r MEWMA_chart_with_retrofitting_basic_lambda_1}
## omit days with 24 NA's per day
NAgeq24 <- DFa |>
  select(mode, temp, ind_day, ind_hour) |>
  group_by(ind_day) |>
  summarise(across(-c(ind_hour), ~sum(is.na(.))>=23)) |>
  filter(mode==TRUE | temp==TRUE) 

DF <- DFa |> filter(!ind_day %in% NAgeq24$ind_day) 

x   <- unique(DF$ind_day)

## Initialize Hotelling setup
Z   <- rep(0, p)
T2a <- rep(NA, length(x))
mu0 <- rep(0, p)

## Fill Hotelling chart
for(i in x) {
  df    <- filter(DF, ind_day==i)
  pred  <- predict(gam2d$gam, newdata=select(df, mode, td01, temp))
  error <- matrix(pred-df$mode, ncol=24)
  error <- matrix(error, ncol=24)
  X <- yaoetal(error, phi, s2, sig, nu)
  if ( i==min(x) ) {
    Z <- r*X + (1-r)*mu0
  } else {
    Z <- r*X + (1-r)*Z
  }
  T2a[i] <- t(Z-mu0) %*% invSig %*% (Z-mu0)
}

## create data frame for plotting
resl1_basic <- data.frame(day=1:472, T2=T2a) |>
  mutate(date=seq.POSIXt(first(DFa$date), last(DFa$date), by="day"))
```

```{r}
filter(resl1_basic, T2 > h41) |> head(n=10)
```

#### MEWMA plot combined

```{r Figure_10_MEWMA_control_charts, fig.width=12, fig.height=7, message=FALSE, warning=FALSE}
lims <- data.frame(
  yintercept=c(h41, h41, h403, h403),
  CHART=factor(c( 
    "MEWMA~chart~(lambda==1)~Basic~model",
    "MEWMA~chart~(lambda==1)~Interactions~model",
    "MEWMA~chart~(lambda==0.3)~Basic~model",
    "MEWMA~chart~(lambda==0.3)~Interactions~model"
)))

rects4 <- data.frame(
  xstart=as.POSIXct("2019-05-15", tz="UTC"),
  xend  =as.POSIXct("2019-09-27", tz="UTC"),
  col="grey45", ymin=.1, ymax=8000) |>
  `colnames<-`(c("xstart", "xend", "col", "ymin", "ymax") )

df <- 
  bind_rows(
  resl1_basic, 
  resl1_interactions,
  resl03_basic, 
  resl03_interactions,
  .id="CHART") |>
  filter(date>="2018-11-23") |>
  mutate(CHART=factor(CHART, labels=c(
    "MEWMA~chart~(lambda==1)~Basic~model",
    "MEWMA~chart~(lambda==1)~Interactions~model",
    "MEWMA~chart~(lambda==0.3)~Basic~model",
    "MEWMA~chart~(lambda==0.3)~Interactions~model"
  ))) |>
  mutate(ALARM=ifelse((T2 > h41) & (CHART%in%c("MEWMA~chart~(lambda==1)~Basic~model")), 1, 0)) |>
  mutate(ALARM=ifelse((T2 > h41) & (CHART%in%c("MEWMA~chart~(lambda==1)~Interactions~model")), 1, ALARM)) |>
  mutate(ALARM=ifelse((T2 > h403) & (CHART%in%c("MEWMA~chart~(lambda==0.3)~Basic~model")), 1, ALARM)) |>
  mutate(ALARM=ifelse((T2 > h403) & (CHART%in%c("MEWMA~chart~(lambda==0.3)~Interactions~model")), 1, ALARM)) |>
  mutate(ALARM=factor(ALARM, levels=c(1,0), labels=c("Signal", "No signal")))

df |> filter(ALARM=="Signal", CHART%in%c("MEWMA~chart~(lambda==1)~Basic~model")) |> head(n=5) 
df |> filter(ALARM=="Signal", CHART%in%c("MEWMA~chart~(lambda==1)~Interactions~model")) |> head(n=5) 
df |> filter(ALARM=="Signal", CHART%in%c("MEWMA~chart~(lambda==0.3)~Basic~model")) |> head(n=5) 
df |> filter(ALARM=="Signal", CHART%in%c("MEWMA~chart~(lambda==0.3)~Interactions~model")) |> head(n=5) 



df |>
  ggplot(aes(x=date, y=T2, group=CHART)) +
    geom_line(linewidth=.2) +
    geom_point(size=.5) +
    geom_point(data=filter(df, ALARM=="Signal"), size=.5, aes(date, T2, group=CHART, color="red")) +
    facet_wrap(~CHART, ncol=2, scales="fixed", labeller = label_parsed) +
    geom_hline(data=lims, aes(yintercept=yintercept, group=CHART), color="orange") +
    geom_rect(data=rects4, aes(xmin=xstart, xmax=xend, ymin=ymin, ymax=ymax),
              alpha=.2, inherit.aes=FALSE) +
    geom_vline(xintercept=as.POSIXct("2019-04-20", tz="UTC"), 
               color="black", linetype="dashed") +
    scale_y_log10(name=bquote(T^2~statistic), breaks=c(1, 10, 30, 100, 500, 2000, 5000), 
                  sec.axis=dup_axis(name="", breaks=h403, labels=expression(h[4]))) +
    scale_x_datetime(name="Time", breaks="1 months") +
    theme(
          legend.title=element_blank(),
          legend.position="inside",
          legend.position.inside=c(.07,.9),
          axis.text=element_text(size=12),
          axis.title=element_text(size=16), 
          legend.text=element_text(size=14),
          plot.title = element_text(size=14),
          strip.text.x = element_text(size=14),
          axis.text.x = element_text(color="black", angle=45, hjust=1),
          axis.text.y = element_text(color="black"),
          axis.ticks = element_line(color = "black")) +
          scale_colour_manual(values="red", labels="Signal") +
    guides(colour=guide_legend(override.aes=list(size=2))) 
```

## Summary of the data set

```{r NA_data_histograms}
dta   <- readRDS("data/Dataset_bridge_KW51.RDS")
M     <- (sprintf("Mode_%02d", 1:14))
i     <- 06  # Mode number
## Phase I data (first 200 observations)
dtai <- dta |> 
  select(tBD31A, rhBD31A, M[i], ind_day, ind_hour, date) |> 
  rename(temp=tBD31A, humid=rhBD31A, mode=M[i]) |>
  group_by(ind_day) |>
  filter(ind_day<=N) |>
  mutate(td01 = hseq) |>
  ungroup()

## determine limits based on mean+-sigma*sd
LIMITS <- dtai |>
  filter(ind_day<=N) |>
  select(mode) |> 
  summarise(mmean = mean(mode, na.rm=TRUE),
            msd   = sd(mode, na.rm=TRUE),
            upperLimit=mmean+sigma*msd,
            lowerLimit=mmean-sigma*msd) 

## days higher than sigma limit
filter(dtai, mode>LIMITS$upperLimit) |> 
  select(ind_day) |> 
  unique()

## replace NA for days higher than sigma limit
dtai <- dtai |> 
  mutate(mode=replace(mode, mode>LIMITS$upperLimit & ind_day%in%c(1:N), NA)) |>
  mutate(mode=replace(mode, mode<LIMITS$lowerLimit & ind_day%in%c(1:N), NA))

## number of days in the study
max(unique(dtai$ind_day))

## complete profiles for mode 06
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  filter(mode == 0) |>
  nrow()

## histogram of NA's in profiles for mode 06
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  select(mode) |>
  ggplot(aes(x=mode)) + 
  ggtitle("Histogram of NA's in profiles for Natural frequency (mode 06)") +
  stat_bin(binwidth=1) +
  stat_bin(binwidth=1, geom="text", aes(label=after_stat(count)), vjust=0) 

## histogram of NA's in profiles for mode 06
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  select(temp) |>
  ggplot(aes(x=temp)) + 
  ggtitle("Histogram of NA's in profiles for Temperature") +
  stat_bin(binwidth=1) +
  stat_bin(binwidth=1, geom="text", aes(label=after_stat(count)), vjust=0) 

## histogram of NA's in profiles for mode 06
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  select(humid) |>
  ggplot(aes(x=humid)) + 
  ggtitle("Histogram of NA's in profiles for relative humidity") +
  stat_bin(binwidth=1) +
  stat_bin(binwidth=1, geom="text", aes(label=after_stat(count)), vjust=0) 
   
countMissings <- dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  select(temp, humid, mode) |>
  sum()

100*countMissings/(24*max(unique(dtai$ind_day)))

## complete profiles without any NAs in confounders (extended models)
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  filter(temp == 0 & humid == 0) |>
  nrow()

## dropped profiles due to obs <=3 (refund) (basic models)
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  filter(temp >21 | mode>21) |>
  nrow()

## dropped profiles due to obs <=3 (refund) (extended models)
dtai |>
  group_by(ind_day) |>
  summarise(across(-c(date), ~sum(is.na(.)))) |> 
  filter(temp >21 | humid>21 | mode>21) |>
  nrow()

```

## Computational and session information

Hardware information:

```{r extract_hardware_specification}
get_cpu()
get_ram()
```

Computation time:

```{r computational_time}
print(paste("Computation time:", round(Sys.time() - start_time, 2)[[1]], "seconds"))
```
Session information:

```{r session_info}
sessionInfo()
```